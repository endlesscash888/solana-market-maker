  public getAnchorProvider(): AnchorProvider {
    // Create proper wallet implementation
    const wallet = {
      publicKey: this.keypair.publicKey,
      payer: this.keypair, // Required property for NodeWallet compatibility
      signTransaction: async <T extends any>(tx: T): Promise<T> => {
        if ("sign" in tx && typeof tx.sign === "function") {
          tx.sign([this.keypair]);
        } else if ("partialSign" in tx && typeof tx.partialSign === "function") {
          tx.partialSign(this.keypair);
        }
        return tx;
      },
      signAllTransactions: async <T extends any>(txs: T[]): Promise<T[]> => {
        txs.forEach(tx => {
          if ("sign" in tx && typeof tx.sign === "function") {
            tx.sign([this.keypair]);
          } else if ("partialSign" in tx && typeof tx.partialSign === "function") {
            tx.partialSign(this.keypair);
          }
        });
        return txs;
      }
    };

    return new AnchorProvider(this.connection, wallet as any, {
      commitment: "confirmed",
      preflightCommitment: "confirmed"
    });
  }
